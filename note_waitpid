ok maintenant si je souhaite recuperer l'exit_status d'un child_process je dois recuperer la valeur de waitpid dans le parent si j'ai bien compris
donc si je fait exit (0) ou exit(1) dans le child, waitpid me donnera la valeur de exit?

ChatGPT said:
ChatGPT
Oui, tu as bien compris, mais avec une nuance importante : la fonction waitpid() te retourne un statut de sortie encodé dans une valeur entière, et il faut utiliser des macros pour extraire le code d'arrêt réel (exit(0) ou exit(1)) de ce statut.

Voici comment cela fonctionne :

Fonctionnement de waitpid()
Quand tu appelles waitpid() dans le processus parent, il retourne le statut de sortie du processus enfant dans un entier, mais cet entier contient plusieurs informations, telles que si l'enfant s'est terminé normalement, a été tué par un signal, ou s'est terminé avec une erreur. Pour extraire le code de sortie que tu as défini dans exit(0) ou exit(1), tu dois utiliser la macro WEXITSTATUS.

Exemple de code :
c
Copy code
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>

int main() {
    pid_t pid;
    int status;

    pid = fork();

    if (pid == -1) {
        // Erreur lors du fork
        perror("fork");
        exit(EXIT_FAILURE);
    }

    if (pid == 0) {
        // Processus enfant
        printf("Je suis l'enfant, je vais sortir avec code 1.\n");
        exit(1);  // Sortie avec le code 1
    } else {
        // Processus parent
        waitpid(pid, &status, 0);  // Attente du processus enfant

        if (WIFEXITED(status)) {
            // Vérifie si l'enfant s'est terminé normalement
            int exit_code = WEXITSTATUS(status);  // Récupère le code de sortie
            printf("L'enfant s'est terminé avec le code de sortie : %d\n", exit_code);
        } else {
            printf("L'enfant ne s'est pas terminé normalement.\n");
        }
    }

    return 0;
}
Explication :
fork() : Crée un nouveau processus. Si fork() retourne 0, tu es dans l'enfant, sinon tu es dans le parent.
Dans l'enfant : Tu appelles exit(1) pour terminer le processus avec le code de sortie 1.
Dans le parent : Tu appelles waitpid() pour attendre la fin de l'enfant et récupérer son statut dans la variable status.
WIFEXITED(status) : Vérifie si l'enfant s'est terminé normalement.
WEXITSTATUS(status) : Extrait le code de sortie réel (celui passé à exit(), ici 1).
Résultat :
Si tu exécutes ce programme, la sortie sera :

rust
Copy code
Je suis l'enfant, je vais sortir avec code 1.
L'enfant s'est terminé avec le code de sortie : 1
Résumé :
waitpid() renvoie un statut qui inclut plusieurs informations, comme si le processus enfant s'est terminé normalement ou non.
Pour obtenir le code passé à exit(), utilise WEXITSTATUS(status) après avoir vérifié avec WIFEXITED(status) que l'enfant s'est terminé correctement.